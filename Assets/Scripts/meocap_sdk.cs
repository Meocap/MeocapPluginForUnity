// Automatically generated by Interoptopus.

#pragma warning disable 0105
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using Meocap;
#pragma warning restore 0105

namespace MeocapSdk
{
    public enum ErrorType
    {
        None = 0,
        Socket = 1,
        InvalidParameter = 2,
        DataCorrupted = 3,
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct Status
    {
        public ErrorType ty;
        public ulong info;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SkelJoint
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 3)]
        public double[] pos; // Array of 3 doubles for position
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SkelBase
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 24)]
        public SkelJoint[] bones; // Array of 24 SkelJoint
        public double floor_y;
    }

    public class CSocket
    {
        // Placeholder for CSocket structure, you can add fields if necessary
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct ConnectServerRet
    {
        public Status err;
        public IntPtr socket; // Pointer to CSocket
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct Joint
    {
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 3)]
        public double[] pos; // Array of 3 doubles for position
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
        public double[] glb_rot; // Array of 4 doubles for global rotation
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 4)]
        public double[] loc_rot; // Array of 4 doubles for local rotation
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct Addr
    {
        public byte a;
        public byte b;
        public byte c;
        public byte d;
        public ushort port;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct MeoFrame
    {
        public int frame_id;
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 3)]
        public double[] translation; // Array of 3 doubles for translation
        [MarshalAs(UnmanagedType.ByValArray, SizeConst = 24)]
        public Joint[] joints; // Array of 24 joints
        public Addr src;
    }

    public static class Api
    {
        public const string NativeLib = "meocap_sdk";
        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl)]
        public static extern Status meocap_command_set_skel(IntPtr socket, ref Addr addr, ref SkelBase skel);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl)]
        public static extern ConnectServerRet meocap_bind_listening_addr(ref Addr addr);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl)]
        public static extern Status meocap_recv_frame(IntPtr socket, ref MeoFrame frame_buf);

        [DllImport(NativeLib, CallingConvention = CallingConvention.Cdecl)]
        public static extern Status meocap_clean_up(IntPtr socket);
    }


    public class InteropException<T> : Exception
    {
        public T Error { get; private set; }

        public InteropException(T error): base($"Something went wrong: {error}")
        {
            Error = error;
        }
    }

}
